@namespace Manager.Version.Components
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using ROH.Blazor.Server.Helpers.Extensions;
@using ROH.Blazor.Server.Interfaces.Api;
@using ROH.Blazor.Server.Api;
@using ROH.Blazor.Server.Interfaces.Helpers
@using ROH.StandardModels.Paginator;
@using ROH.StandardModels.Response;
@using ROH.StandardModels.Version;
@using ROH.Utils.Helpers;
@using Pages.Components;

@inject IVersionService _versionService;
@inject ISweetAlertService _sweetAlert;

<CardComponent Header="Versions">
    <div class="row">
        <div class="col-sm-12">
            <label for="releasedVersionSelect"></label>
            <select id="releasedVersionSelect" @onchange="OnVersionTypeChange">
                @foreach (var type in versionTypes)
                {
                    <option value="@type">@type</option>
                }
            </select>
        </div>
    </div>

    @if (isLoadingCurrentVersion)
    {
        <div style="text-align:center">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only"></span>
            </div>
        </div>
    }

    else
    {
        <PaginatedListComponent IsFirstPage="@IsFirstPage"
                                IsLastPage="@IsLastPage"
                                Items="@PagedGameVersions?.ToListModel()"
                                NextPage="@NextPage"
                                PreviousPage="@PreviousPage"
                                T="@GameVersionListModel" />
    }

</CardComponent>

@code {
    private List<string> versionTypes = new List<string>()
    {
        "All Versions",
        "Released Versions"
    };

    private string selectedVersionType = "All Versions";
    private bool isLoadingCurrentVersion = true;
    private List<GameVersionModel>? PagedGameVersions = new List<GameVersionModel>();
    private int? TotalPages = 0;
    private int PageSize = 10;
    private int CurrentPage = 1;
    private bool IsFirstPage => CurrentPage == 1;
    private bool IsLastPage => (CurrentPage * PageSize) >= TotalPages;
    private DefaultResponse? apiResponse = null;

    private async Task PreviousPage()
    {
        if (!IsFirstPage)
        {
            CurrentPage--;
            await GetAllVersion(page: CurrentPage);
        }
    }

    private async Task NextPage()
    {
        if (!IsLastPage)
        {
            CurrentPage++;
            await GetAllVersion(page: CurrentPage);
        }
    }

    private async Task OnVersionTypeChange(ChangeEventArgs e)
    {
        if (e.Value == null)
            return;

        selectedVersionType = e.Value?.ToString() ?? "All Versions";
        await GetAllVersion();
    }

    protected override async void OnInitialized()
    {
        base.OnInitialized();
        await GetAllVersion();
    }

    private async Task GetAllVersion(int page = 1, int take = 10)
    {
        isLoadingCurrentVersion = true;
        PagedGameVersions = new List<GameVersionModel>();
        apiResponse = null;
        if (selectedVersionType == "All Versions")
            apiResponse = await _versionService.GetAllVersionsPaginated(page, take);
        else if (selectedVersionType == "Released Versions")
            apiResponse = await _versionService.GetAllReleasedVersionsPaginated(page, take);

        if (apiResponse != null && !apiResponse.HttpStatus.IsSuccessStatusCode())
        {
            await _sweetAlert.ShowResponse(apiResponse);
        }

        else if (apiResponse != null && apiResponse.ObjectResponse != null && apiResponse.HttpStatus.IsSuccessStatusCode())
        {
            var result = JsonConvert.DeserializeObject<PaginatedModel>(apiResponse.ObjectResponse.ToString() ?? "");

            if (result != null)
            {
                TotalPages = result.TotalPages;

                if (result.ObjectResponse != null)
                {
                    var versionList = result.ObjectResponse.ToList();

                    foreach (var item in versionList)
                    {
                        var gameVersionModel = JsonConvert.DeserializeObject<GameVersionModel>(item.ToString());

                        if (gameVersionModel != null)
                        {
                            PagedGameVersions?.Add(gameVersionModel);
                        }
                    }
                }
            }
        }

        isLoadingCurrentVersion = false;
        StateHasChanged();

    }
}
