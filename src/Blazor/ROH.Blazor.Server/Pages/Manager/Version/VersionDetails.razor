@page "/Manager/Version/VersionDetails/{versionGuid}"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@using ROH.Blazor.Server.Interfaces.Api;
@using ROH.Blazor.Server.Interfaces.Helpers;
@using ROH.StandardModels.Response
@using ROH.StandardModels.Version;
@using ROH.Utils.Helpers;
@using Microsoft.AspNetCore.Components.Forms;
@using ROH.Blazor.Server.Pages

@inject IVersionService _versionService;
@inject IVersionFileService _versionFileService;
@inject ISweetAlertService _sweetAlert;

<Pages.Components.AuthorizeComponent>
    @if (gameVersion is not null)
    {
        <Pages.Components.CardComponent Header="Version">
            <div class="row">
                <div class="col-sm-1">
                    <label for="Version">Version:</label>
                </div>
                <div class="col-sm-1">
                    <input type="number" id="Version" class="form-control" @bind="gameVersion.Version" readonly />
                </div>

                <div class="col-sm-1">
                    <label for="Release">Release:</label>
                </div>
                <div class="col-sm-1">
                    <input type="number" id="Release" class="form-control" @bind="gameVersion.Release" readonly />
                </div>

                <div class="col-sm-1">
                    <label for="Review">Review:</label>
                </div>
                <div class="col-sm-1">
                    <input type="number" id="Review" class="form-control" @bind="gameVersion.Review" readonly />
                </div>

                @if (!gameVersion.Released)
                {
                    <div class="col-sm-2">
                        <button class="btn btn-outline-primary" @onclick="ReleaseVersion"> Release Version </button>
                    </div>
                }

                @if (gameVersion.ReleaseDate.HasValue)
                {
                    <div class="col-sm-1">
                        <label for="ReleaseDate">Released Date:</label>
                    </div>
                    <div class="col-sm-3">
                        <input type="date" id="ReleaseDate" class="form-control" @bind="gameVersion.ReleaseDate" readonly />
                    </div>
                }

            </div>
        </Pages.Components.CardComponent>
    }

    <Pages.Components.CardComponent Header="Upload File">
        <EditForm Model="gameVersionFile" OnValidSubmit="HandleSubmit" style="margin:20px">
            <div class="row">
                <div class="col-sm-10">
                    <div class="form-group">
                        <label for="file">Files:</label>
                        <InputFile id="file" multiple maxAllowedSize="0" OnChange="HandleFileSelection" />
                    </div>
                </div>
                <div class="col-sm-2">
                    <button type="submit" class="btn btn-outline-success">Submit</button>
                </div>
            </div>
        </EditForm>

        @if (isUploading)
        {
            <div class="row">
                <div class="col-sm-12">
                    <div class="text-center">
                        <MatProgressBar Progress="@(uploadProgress/100)" />
                        <p>Uploading... (@uploadProgress%)</p>
                    </div>
                </div>
            </div>
        }
        <div class="row">
            <div class="col-sm-12">
                <Manager.Version.Components.AllFilesComponent VersionGuid="@versionGuid">
                </Manager.Version.Components.AllFilesComponent>
            </div>
        </div>
    </Pages.Components.CardComponent>
</Pages.Components.AuthorizeComponent>



@code {
    [Parameter]
    public string? versionGuid { get; set; }

    private GameVersionModel? gameVersion = null;
    private readonly ICollection<GameVersionFileModel> gameVersionFile = new List<GameVersionFileModel>();
    private IReadOnlyList<IBrowserFile>? selectedFiles;
    private bool isUploading = false;
    private double uploadProgress = 0;
    private DefaultResponse? defaultResponse = new();

    protected override async Task OnInitializedAsync()
    {
        await GetVersionByGuid();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && gameVersion is null)
        {
            await HandleGetVersionResponse(defaultResponse);
        }
    }

    private async Task GetVersionByGuid()
    {
        if (Guid.TryParse(versionGuid, out Guid guid))
        {
            defaultResponse = await _versionService.GetVersionDetails(guid);
        }
        else
        {
            await _sweetAlert.Show("ERROR", "Incorrect uuid version", Helpers.Types.SweetAlertType.Error);
        }

        StateHasChanged();
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        await Task.CompletedTask;
    }

    private async Task HandleSubmit(EditContext editContext)
    {

        if (selectedFiles != null && selectedFiles.Any())
        {
            try
            {
                string fileName;
                string fileExtension;
                long fileSize = 0;
                long maxFileSize = 1000000000;
                bool uploaded = false;
                isUploading = true;
                int totalFiles = selectedFiles.Count; // Total files being uploaded
                int filesUploaded = 0;

                foreach (var file in selectedFiles)
                {
                    fileName = file.Name;
                    fileExtension = Path.GetExtension(fileName);
                    fileSize = file.Size;
                    if (fileSize > maxFileSize)
                    {
                        await _sweetAlert.Show("Upload File", "The file size must be less than 1 Gb.", Helpers.Types.SweetAlertType.Warning);
                    }
                    else
                    {
                        using (var stream = file.OpenReadStream(maxFileSize))
                        using (var ms = new MemoryStream())
                        {
                            await stream.CopyToAsync(ms);
                            var fileContent = ms.ToArray();

                            filesUploaded++;
                            uploadProgress = ((double)filesUploaded / totalFiles * 100);
                            StateHasChanged();

                            var responseUpload = await _versionFileService.UploadVersionFile(
                            new GameVersionFileModel()
                                {
                                    Guid = Guid.Empty,
                                    Name = fileName,
                                    Format = fileExtension,
                                    Content = fileContent,
                                    Size = fileSize,
                                    GameVersion = gameVersion
                                }
                            );

                            if (responseUpload != null && !responseUpload.HttpStatus.IsSuccessStatusCode())
                                await _sweetAlert.ShowResponse(responseUpload);
                            else if (responseUpload != null && responseUpload.HttpStatus.IsSuccessStatusCode())
                                uploaded = true;
                        }
                    }

                }

                if (uploaded)
                    await _sweetAlert.Show("Upload File", "File has been uploaded", Helpers.Types.SweetAlertType.Success);
            }
            finally
            {
                selectedFiles = null;
                isUploading = false;
                uploadProgress = 0;
                StateHasChanged();
            }

        }
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task ReleaseVersion(MouseEventArgs e)
    {
        if (gameVersion is null)
            return;

        var response = await _versionService.ReleaseVersion(gameVersion);

        if (response is not null)
            await _sweetAlert.ShowResponse(response);

        StateHasChanged();
    }

    private async Task HandleGetVersionResponse(DefaultResponse? response)
    {
        if (response is not null
            && response.HttpStatus.IsSuccessStatusCode()
            && response.ObjectResponse is not null
            && gameVersion is null)
            gameVersion = response?.ResponseToModel<GameVersionModel>() ?? new();
        else if (response is not null)
            await _sweetAlert.ShowResponse(response);

        StateHasChanged();
    }
}
