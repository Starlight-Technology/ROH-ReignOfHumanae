@namespace Manager.Version.Components
@using Newtonsoft.Json;
@using ROH.Blazor.Server.Interfaces.Api;
@using ROH.Blazor.Server.Interfaces.Helpers;
@using ROH.StandardModels.Version;
@using ROH.Blazor.Server.Api;
@using Pages.Components;
@using ROH.Utils.Helpers;

@inject IVersionService _versionService;
@inject ISweetAlertService _sweetAlert;

<Pages.Components.CardComponent Header="Current Version">
    @if (isLoadingCurrentVersion)
    {
        <div style="text-align:center">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only"></span>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-sm-1">
                <label for="Version">Version:</label>
            </div>
            <div class="col-sm-1">
                <input type="number" id="Version" class="form-control" @bind="currentVersion!.Version" readonly />
            </div>

            <div class="col-sm-1">
                <label for="Release">Release:</label>
            </div>
            <div class="col-sm-1">
                <input type="number" id="Release" class="form-control" @bind="currentVersion.Release" readonly />
            </div>

            <div class="col-sm-1">
                <label for="Review">Review:</label>
            </div>
            <div class="col-sm-1">
                <input type="number" id="Review" class="form-control" @bind="currentVersion.Review" readonly />
            </div>

            <div class="col-sm-1">
                <label for="ReleaseDate">Released Date:</label>
            </div>
            <div class="col-sm-3">
                <input type="date" id="ReleaseDate" class="form-control" @bind="currentVersion.ReleaseDate" readonly />
            </div>

            <div class="col-sm-1">
                <a href="/Manager/Version/VersionDetails/@currentVersion.Guid"><i class="fa fa-solid fa-eye">DETAILS</i></a>
            </div>
        </div>

    }

</Pages.Components.CardComponent>

@code {

    private bool isLoadingCurrentVersion = true;

    private GameVersionModel? currentVersion = new()
        {
            Version = 0,
            Release = 0,
            Review = 0
        };

    protected override async void OnInitialized()
    {
        base.OnInitialized();
        await GetCurrentVersion();
    }

    private async Task GetCurrentVersion()
    {
        isLoadingCurrentVersion = true;
        var currentVersionResponse = await _versionService.GetCurrentVersion();

        if(!currentVersionResponse.HttpStatus.IsSuccessStatusCode())
            await _sweetAlert.ShowResponse(currentVersionResponse);
        else if (currentVersionResponse.ObjectResponse != null )
            currentVersion = JsonConvert.DeserializeObject<GameVersionModel>(currentVersionResponse.ObjectResponse.ToString()!);     
                    
        isLoadingCurrentVersion = false;
        StateHasChanged();
    }
}
